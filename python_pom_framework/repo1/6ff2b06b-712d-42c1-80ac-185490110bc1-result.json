{"name": "test_check_for_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\n  (Session info: chrome=128.0.6613.86)\nStacktrace:\n\tGetHandleVerifier [0x00007FF60FA1B632+29090]\n\t(No symbol) [0x00007FF60F98E6E9]\n\t(No symbol) [0x00007FF60F84B1CA]\n\t(No symbol) [0x00007FF60F843204]\n\t(No symbol) [0x00007FF60F834179]\n\t(No symbol) [0x00007FF60F835F42]\n\t(No symbol) [0x00007FF60F83443F]\n\t(No symbol) [0x00007FF60F833CD1]\n\t(No symbol) [0x00007FF60F833C10]\n\t(No symbol) [0x00007FF60F831AD3]\n\t(No symbol) [0x00007FF60F83214C]\n\t(No symbol) [0x00007FF60F84E231]\n\t(No symbol) [0x00007FF60F8E73FE]\n\t(No symbol) [0x00007FF60F8C66EA]\n\t(No symbol) [0x00007FF60F8E65D9]\n\t(No symbol) [0x00007FF60F8C6493]\n\t(No symbol) [0x00007FF60F8909B1]\n\t(No symbol) [0x00007FF60F891B11]\n\tGetHandleVerifier [0x00007FF60FD3883D+3294125]\n\tGetHandleVerifier [0x00007FF60FD84423+3604371]\n\tGetHandleVerifier [0x00007FF60FD7A2E7+3563095]\n\tGetHandleVerifier [0x00007FF60FAD6F16+797318]\n\t(No symbol) [0x00007FF60F99986F]\n\t(No symbol) [0x00007FF60F995454]\n\t(No symbol) [0x00007FF60F9955E0]\n\t(No symbol) [0x00007FF60F984A7F]\n\tBaseThreadInitThunk [0x00007FFB1FBC257D+29]\n\tRtlUserThreadStart [0x00007FFB1FF8AF28+40]", "trace": "@pytest.fixture()\n    def driver():\n        driver = WebDriver()\n        driver.maximize_window()\n>       driver.get(\"https://demowebshop.tricentis.com/\")\n\npytest_demowebshop\\Tests\\conftest.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002BC155C36E0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_INTERNET_DISCONNECTED\\\\...07FF60F984A7F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB1FBC257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFB1FF8AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_INTERNET_DISCONNECTED\nE         (Session info: chrome=128.0.6613.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF60FA1B632+29090]\nE       \t(No symbol) [0x00007FF60F98E6E9]\nE       \t(No symbol) [0x00007FF60F84B1CA]\nE       \t(No symbol) [0x00007FF60F843204]\nE       \t(No symbol) [0x00007FF60F834179]\nE       \t(No symbol) [0x00007FF60F835F42]\nE       \t(No symbol) [0x00007FF60F83443F]\nE       \t(No symbol) [0x00007FF60F833CD1]\nE       \t(No symbol) [0x00007FF60F833C10]\nE       \t(No symbol) [0x00007FF60F831AD3]\nE       \t(No symbol) [0x00007FF60F83214C]\nE       \t(No symbol) [0x00007FF60F84E231]\nE       \t(No symbol) [0x00007FF60F8E73FE]\nE       \t(No symbol) [0x00007FF60F8C66EA]\nE       \t(No symbol) [0x00007FF60F8E65D9]\nE       \t(No symbol) [0x00007FF60F8C6493]\nE       \t(No symbol) [0x00007FF60F8909B1]\nE       \t(No symbol) [0x00007FF60F891B11]\nE       \tGetHandleVerifier [0x00007FF60FD3883D+3294125]\nE       \tGetHandleVerifier [0x00007FF60FD84423+3604371]\nE       \tGetHandleVerifier [0x00007FF60FD7A2E7+3563095]\nE       \tGetHandleVerifier [0x00007FF60FAD6F16+797318]\nE       \t(No symbol) [0x00007FF60F99986F]\nE       \t(No symbol) [0x00007FF60F995454]\nE       \t(No symbol) [0x00007FF60F9955E0]\nE       \t(No symbol) [0x00007FF60F984A7F]\nE       \tBaseThreadInitThunk [0x00007FFB1FBC257D+29]\nE       \tRtlUserThreadStart [0x00007FFB1FF8AF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "log", "source": "280a2c61-8c26-46a8-8ca0-8c651523c4ce-attachment.txt", "type": "text/plain"}], "start": 1724913744936, "stop": 1724913744936, "uuid": "965f0abf-f99a-4596-bc6e-f8fb05f386c8", "historyId": "48e1d670a40d0674342241b2ec617382", "testCaseId": "48e1d670a40d0674342241b2ec617382", "fullName": "pytest_demowebshop.Tests.test_homepage#test_check_for_login", "labels": [{"name": "parentSuite", "value": "pytest_demowebshop.Tests"}, {"name": "suite", "value": "test_homepage"}, {"name": "host", "value": "LAPTOP-HOI11GMM"}, {"name": "thread", "value": "11236-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pytest_demowebshop.Tests.test_homepage"}]}